class JverifyErrorCode {
  static getmsg(int code) {
    switch (code) {
      case 1000:
        return '手机号验证一致';
      case 1001:
        return '手机号验证不一致';
      case 1002:
        return '未知结果';
      case 1003:
        return 'token失效';
      case 1004:
        return 'sdk发起认证未开启';
      case 1005:
        return '请检查客户端配置的包名与官网对应AppKey应用下配置的包名是否一致';
      case 1006:
        return '同一号码自然日内认证消耗超过限制';
      case 1007:
        return 'appkey自然日认证消耗超过限制';
      case 1008:
        return '请到官网检查此应用信息中的appkey';
      case 1009:
        return '请到官网检查此应用的应用详情；更新应用中集成的极光SDK至最新';
      case 1010:
        return '同一号码连续两次提交认证间隔过短';
      case 1011:
        return '应用签名错误，检查签名与portal设置的是否一致';
      case 2000:
        return '获取token成功';
      case 2001:
        return '获取token失败';
      case 2002:
        return 'sdk初始化失败';
      case 2003:
        return '网络链接不通';
      case 2004:
        return '极光服务注册失败';
      case 2005:
        return '请求超时';
      case 2006:
        return '获取应用配置失败';
      case 2007:
        return '验证遇到代码异常';
      case 2008:
        return '正在获取token中，稍后再试';
      case 2009:
        return '正在认证中，稍后再试';
      case 2010:
        return '未开启读取手机状态权限';
      case 2011:
        return '获取配置时代码异常';
      case 2012:
        return '获取token时代码异常';
      case 2013:
        return '网络发生异常';
      case 2014:
        return '请求token时发生内部错误';
      case 2016:
        return '当前网络环境不支持认证';
      case 2017:
        return '运营商配置错误';
      case 2018:
        return '本地不支持的运营商';
      case 3000:
        return '获取短信验证码成功';
      case 3001:
        return '没有初始化';
      case 3002:
        return '无效电话号码';
      case 3003:
        return '前后两次请求少于设定时间';
      case 3004:
        return '请求错误，具体查看错误信息log';
      case 4001:
        return '参数错误，请检查请求参数';
      case 4014:
        return '功能禁用';
      case 4018:
        return '没有足够余额';
      case 4031:
        return '不是认证sdk用户';
      case 4032:
        return '获取不到用户配置';
      case 4033:
        return '不是一键登录用户（请在认证设置-一键登录中配置RSA公钥）';
      case 5000:
        return '服务器未知错误';
      case 6000:
        return '获取loginToken成功';
      case 6001:
        return '获取loginToken失败';
      case 6002:
        return '用户取消获取';
      case 6003:
        return 'UI资源加载异常';
      case 6004:
        return '正在登录中，请稍后再试';
      case 6006:
        return '预取号结果超时，需要重新预取号';
      case 7000:
        return 'sdk预取号成功';
      case 7001:
        return 'sdk预取号失败';
      case 7002:
        return '正在预取号中，请稍后再试';
      case 8000:
        return '初始化成功';
      case 8004:
        return '初始化失败，详情见日志';
      case 8005:
        return '初始化超时，请稍后再试';
      case -994:
        return '网络链接超时';
      case -996:
        return '网络连接断开';
      case -997:
        return '注册/登陆失败,错误码：-997';
      default:
        return '未知错误';
    }
  }
}
